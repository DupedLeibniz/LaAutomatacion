import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class Estado implements Serializable {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;

	private String nombre; // El identificador del estado
	private boolean esDeAceptacion; // Si el estado es de aceptacion
	private List<Transicion> transiciones; // Los caminos que salen del estado

	public Estado(String nombre) {
		this.nombre = nombre;
		this.esDeAceptacion = false;
		transiciones = new ArrayList<>();
	}

	public Estado moverse(char simbolo) {

		for (Transicion t : transiciones) {
			if (t.getSimbolo() == simbolo) {
				return t.getEstadoSiguiente(); // Si hay un camino para el simbolo, devolver el estado al que lleva tal
												// camino
			}
		}

		return null;

	}

	public void agregarTransicion(Estado siguienteEstado, char simbolo) throws NoDeterministaException {

		// Evita que se agregue mas de un camino para el mismo simbolo
		for (Transicion t : transiciones) {
			if (t.getSimbolo() == simbolo) {
				throw new NoDeterministaException(
						"El estado \'" + nombre + "\' ya tiene un camino para el simbolo \'" + simbolo + "\'!");
			}
		}

		transiciones.add(new Transicion(this, siguienteEstado, simbolo));
	}

	public List<Transicion> getTransiciones() {
		return transiciones;
	}

	public void setTransiciones(List<Transicion> transiciones) {
		this.transiciones = transiciones;
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public boolean esDeTerminacion() {
		return esDeAceptacion;
	}

	public void setEsDeAceptacion(boolean esDeTerminacion) {
		this.esDeAceptacion = esDeTerminacion;
	}

	public static class NoDeterministaException extends Exception {
		/**
		 *
		 */
		private static final long serialVersionUID = 1L;

		public NoDeterministaException(String mensaje) {
			super(mensaje);
		}
	}

}
