import java.io.Serializable;
import java.util.Scanner;

public class AutomataFinito implements Serializable {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;

	private char[] alfabeto; // Los simbolos que puede usar el automata
	private int[][] tablaDeTransicion; // La tabla de transicion del automata

	public AutomataFinito(char[] alfabeto, int cantidadDeEstados) {

		this.alfabeto = alfabeto;
		/*
		 * ¿Por que se añade + 1 posicion en las columnas (alfabeto.length + 1)? Esta
		 * celda adicional representa si el estado (fila) es de terminacion. Si fuese
		 * esto cierto, la ultima celda de la fila guarda el valor 1. Si no, guarda el
		 * valor 0.
		 *
		 */
		this.tablaDeTransicion = new int[cantidadDeEstados][alfabeto.length + 1];

	}

	public void llenarTablaDeTransicion() {

		@SuppressWarnings("resource")
		/*
		 * ADVERTENCIA No cerrar el flujo de este sc en especifico con sc.close(), ya
		 * que no cierra el stream de este sc en especifico, sino en general, evitando
		 * que otras clases utilicen sus propios scanners de forma predecible
		 *
		 */
		Scanner sc = new Scanner(System.in);

		for (int i = 0; i < tablaDeTransicion.length; i++) {

			System.out.println("\n-===[ Llenando el estado " + i + " ]===-");
			System.out.print("¿Es este estado un estado de terminacion? Ingrese SI o NO\n>> ");
			String esEstadoDeTerminacion = sc.next().trim().toUpperCase();
			/*
			 * Como se menciona en el constructor de la clase, si este estado (fila) es de
			 * terminacion, la ultima celda se establece como 1. Si no, se establece como 0.
			 *
			 */
			tablaDeTransicion[i][alfabeto.length] = esEstadoDeTerminacion.equals("SI") ? 1 : 0;

			for (int j = 0; j < alfabeto.length; j++) {

				System.out.println("Si se lee el simbolo \"" + alfabeto[j] + "\", ir al estado:");
				System.out.print("(Ingrese un entero o -1 si no hay estado siguiente para este simbolo)\n>> ");
				int estadoSiguiente = sc.nextInt();
				tablaDeTransicion[i][j] = estadoSiguiente;

			}

		}

	}

	/*
	 * Devuelve el contenido de una celda de la tabla de transicion, dado un estado
	 * (fila) y un simbolo (columna).
	 */
	public int getSiguienteEstado(int estado, char simbolo) throws SimboloInvalidoException {

		boolean simboloEsValido = false;
		for (char c : alfabeto) {
			if (c == simbolo) {
				simboloEsValido = true;
			}
		}

		if (!simboloEsValido) {
			throw new SimboloInvalidoException("El simbolo \"" + simbolo + "\" no pertenece al alfabeto del automata.");
		}

		for (int i = 0; i < alfabeto.length; i++) {
			if (alfabeto[i] == simbolo) {
				return tablaDeTransicion[estado][i];
			}
		}

		return -1;

	}

	/*
	 * Devuelve si este estado (fila) es de terminacion.
	 */
	public boolean esEstadoDeTerminacion(int estado) {
		return tablaDeTransicion[estado][alfabeto.length] == 1;
	}

	public static class SimboloInvalidoException extends Exception {
		/**
		 *
		 */
		private static final long serialVersionUID = 1L;

		public SimboloInvalidoException(String mensaje) {
			super(mensaje);
		}
	}

}
